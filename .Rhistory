find.packages('devtools')
install.packages('devtools')
library(devtools)
find_rtools()
add2 <-(x,y)|
x+y
}
add2 <- function(x,y)|
x+y
}
add2 <- function(x,y) {}
x+y
}
add2 <- function(x,y) {
x+y
}
add2 <- function(x,y) {
x+y
}
add2 <- function(x,) {
x+y
}
add2 <- function(x,y) {
x+y
}
add2(3,5)
above <- function(x,n) {
use <- x>n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x,n10=) {
use <- x>n
x[use]
}
above <- function(x,n=10) {
use <- x>n
x[use]
}
above <- function(x,n=10) {
use <- x>n
x{use]
}
above <- function(x,n=10) {
use <- x>n
x[use]
}
above(x)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(in 1:nc) {
means[i] <- mean(y[,i])
}
}
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
}
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
column(airquality)
columnmean(airquality)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,1])
}
}
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
}
columnmean(airquality)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y,removeNA=TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i],na.rm=removeNA)
}
means
}
columnmean(airquality)
cube <- function(x,n) {
x^3
}
cube <- function(x,n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <-0
}
f <- function(x){
g<-function(y){
y+u
}
u <- 4
x+g(x)
}
u <-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
}
y
z <- 10
f(3)
} else {
y
return(g)
z
d
L
x
f
g
x
y
g <- x + y / z
g
z
cube(3)
z <- 10
f(3)
y
x
x
$a
a
a=matrix(1:4,2,2)
a
lappy(x,function(elt) elt[,])
x
x <-list(a=matrix(1:4,2,2),b=matrix(1:6,3,2))
x
lapply(x,function(elt)elt[,1])
x <- list(a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
lapply(x,mean)
sapply(x,mean)
mean(x)
x<-matrix(rnorm(200),20,10)
x
apply(x,2,mean)
apply(x,1,sum)
a<-array(rnomr(2*2*10),c(2,2,10))
a<-array(rnorm(2*2*10),c(2,2,10))
a
apply(a,c(1,2),mean)
x <- c(rnorm(10),runif(10),rnorm(10,1))
x
f<-gl(3,10)
f
tapply(x,f,mean)
mean(x)
traceback()
library(datasets)
data(iris)
?iris
library(swirl)
swirl()
q()
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
q()
install.packages("RMySQL", type = "source")
q()
install.packages("RMySQL", type = "source")
q()
install.packages('RMySQL',type='source')
library(RMySQL)
q()
library(kernlab)
data(spam)
str(spam[, 1:5])
install.packages(kernlab)
library(kernlab)
data(spam)
str(spam[, 1:5])
install.packages(kernlab)
install.packages('kernlab')
library(kernlab)
data(spam)
str(spam[, 1:5])
```{r}
install.packages("knitr")
version
packageStatus()
rmarkdown::render('filename.Rmd', 'html_document')
knit2html("file.Rmd")
install.packages("knit2html")
library("knitr", lib.loc="~/R/win-library/3.1")
install.packages(c("DBI", "mgcv", "Rcpp", "rmarkdown"))
library("markdown", lib.loc="~/R/win-library/3.1")
library("rstudio", lib.loc="~/R/win-library/3.1")
library("knitr", lib.loc="~/R/win-library/3.1")
install.packages(c("openxlsx", "RSQLite", "sqldf"))
lambda <- 0.2
mean <- 1/2
sigma <- 1/2
seed <- set.seed(080808)
exponential_averages = NULL
for (i in 1 : 1000) exponential_averages= c(exponential_averages, mean(rexp(40, lambda)))
head(exponential_averages)
library("knitr", lib.loc="~/R/win-library/3.1")
lambda <- 0.2
mean <- 1/2
sigma <- 1/2
seed <- set.seed(080808)
exponential_averages = NULL
for (i in 1 : 1000) exponential_averages= c(exponential_averages, mean(rexp(40, lambda)))
head(exponential_averages)
data(mtcars)
y <- mtcars$mpg; x <- mtcars$am; n <- length(y)
fit <- lm(y ~ x);e <- resid(fit);yhat <- predict(fit);max(abs(e -(y - yhat)))
linReg = lm(mpg ~ am,data=mtcars)
LinReg_res=resid(linReg)
plot(mtcars$am,LinReg_res,ylab="Residuals","xlab="Fuel consumption",main="Automatic or manual fuel consumption);
abline(0,0)
linReg = lm(mpg ~ am,data=mtcars)
LinReg_res=resid(linReg)
plot(mtcars$am,LinReg_res,ylab="Residuals",xlab="Fuel consumption",main="Automatic or manual fuel consumption");
abline(0,0)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
#manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
myplot
myPlot
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
library(e1071)
q()
library("e1071", lib.loc="~/R/win-library/3.1")
detach("package:e1071", unload=TRUE)
setwd ("C:/Users/Elizabeth/Desktop/Datascience/Coursera/Developing_Data_Products/project2/Presentation_Project")
result <- rpubsUpload("MDeveloping_Data_Products_Slidify", "index.html")
if (!is.null(result$continueUrl))
browseURL(result$continueUrl) else stop(result$error)
setwd ("C:/Users/Elizabeth/Desktop/Datascience/Coursera/Developing_Data_Products/project2/Presentation_Project")
library(knitr)
options(rpubs.upload.method = "internal")
getwd()
options(rpubs.upload.method = "internal")
getwd()
getwd()
install.packages("knitr")
library(knitr)
getwd()
getwd()
getwd()
library(slidify)
require(devtools)
install.packages("devtools")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
slidify("index.Rmd")
slidify('index.Rmd')
RStudio.version()
getwd()
file.edit(“.Rprofile”)
file.edit(".Rprofile")
getwd()
setwd ("C:/Users/Elizabeth/Desktop/Datascience/Coursera/Developing_Data_Products/slidify1/slidify")
slidify('index.Rmd')
library(slidify)
install.packages('devtools')
install.packages('devtools')
install.packages('devtools')
